version: '3.4'

services:
  flask:
    build: ./
    container_name: flask
    environment:
      FLASK_ENV: development
      FLASK_APP: app/main
    volumes:
      - "./:/app"
    depends_on:
      - database
      - redis
    expose:
      - "5000"
    networks:
      - db_nw
      - web_nw
      - redis_nw    

  nginx:
    image: nginx:1.15-alpine
    ports:
      - 80:80
      - "443:443"
    volumes:
      - ./services/nginx:/etc/nginx/conf.d
      - ./services/certbot/conf:/etc/letsencrypt
      - ./services/certbot/www:/var/www/certbot
    depends_on:
      - flask
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - web_nw

  certbot:
    image: certbot/certbot
    volumes:
      - ./services/certbot/conf:/etc/letsencrypt
      - ./services/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  
  database:
    image: "postgres" # use latest official postgres version
    env_file:
      - database.env # configure postgres
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
    ports:
      - "5432:5432"
    networks:
      - db_nw

  worker:
    build:
      context: ./
      dockerfile: Dockerfile
    working_dir: /app
    command: celery -A app.tasks worker -l info -E
    environment:
      CELERY_BROKER_URL: redis://redis
      CELERY_RESULT_BACKEND: redis://redis
    depends_on:
      - redis
    networks:
      - redis_nw
      - db_nw
    volumes: ["./:/app"]
  beat:
    build:
      context: ./
      dockerfile: Dockerfile
    working_dir: /app
    command: celery -A app.tasks beat -l info
    environment:
      CELERY_BROKER_URL: redis://redis
      CELERY_RESULT_BACKEND: redis://redis
    depends_on:
      - redis
    networks:
      - redis_nw
      - db_nw
    volumes: ["./:/app"]
  monitor:
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
     - "5555:5555"
    command:  ['celery', 'flower', '-A', 'app.tasks']
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      - redis
      - worker
    networks:
      - redis_nw
    volumes: ["./:/app"]
  redis:
    image: redis:alpine
    networks:
      - redis_nw

networks:
  db_nw:
    driver: bridge
  web_nw:
    driver: bridge
  redis_nw:
    driver: bridge

volumes:
  database-data: # named volumes can be managed easier using docker-compose
